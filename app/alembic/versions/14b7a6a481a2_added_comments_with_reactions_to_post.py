"""added comments with reactions to post

Revision ID: 14b7a6a481a2
Revises: 89235c7f1c79
Create Date: 2025-09-30 00:31:38.161947

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "14b7a6a481a2"
down_revision: Union[str, Sequence[str], None] = "89235c7f1c79"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "post_comments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("post_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("comment_text", sa.String(length=500), nullable=False),
        sa.Column("comment_likes", sa.Integer(), nullable=False),
        sa.Column("comment_dislikes", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            nullable=False,
            server_default=sa.func.now(),
        ),
        sa.ForeignKeyConstraint(["post_id"], ["post.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_post_comments_id"), "post_comments", ["id"], unique=False)
    op.create_table(
        "comment_reactions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("comment_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "reaction_type",
            sa.Enum("LIKE", "DISLIKE", name="reactiontype"),
            nullable=False,
        ),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["comment_id"], ["post_comments.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "comment_id", name="uq_comment_user_reaction"),
    )
    op.create_index(
        op.f("ix_comment_reactions_id"), "comment_reactions", ["id"], unique=False
    )
    op.add_column(
        "post_reactions",
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            nullable=False,
            server_default=sa.func.now(),
        ),
    )

    op.execute("UPDATE post_reactions SET reaction_type = UPPER(reaction_type)")

    op.alter_column(
        "post_reactions",
        "reaction_type",
        existing_type=sa.VARCHAR(length=10),
        type_=sa.Enum("LIKE", "DISLIKE", name="reactiontype"),
        postgresql_using='reaction_type::reactiontype',
        existing_nullable=False,
    )
    op.create_unique_constraint(
        "uq_post_user_reaction", "post_reactions", ["user_id", "post_id"]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("uq_post_user_reaction", "post_reactions", type_="unique")
    op.alter_column(
        "post_reactions",
        "reaction_type",
        existing_type=sa.Enum("LIKE", "DISLIKE", name="reactiontype"),
        type_=sa.VARCHAR(length=10),
        existing_nullable=False,
    )
    op.drop_column("post_reactions", "updated_at")
    op.drop_index(op.f("ix_comment_reactions_id"), table_name="comment_reactions")
    op.drop_table("comment_reactions")
    op.drop_index(op.f("ix_post_comments_id"), table_name="post_comments")
    op.drop_table("post_comments")
    # ### end Alembic commands ###
