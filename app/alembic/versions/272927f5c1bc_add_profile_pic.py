"""Add profile_pic

Revision ID: 272927f5c1bc
Revises: 243c0cf793fc
Create Date: 2025-07-02 22:27:44.842896

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '272927f5c1bc'
down_revision: Union[str, Sequence[str], None] = '243c0cf793fc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('friendship', sa.Column('user_id', sa.Integer(), nullable=False))
    op.add_column('friendship', sa.Column('friend_id', sa.Integer(), nullable=False))
    op.alter_column('friendship', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('friendship', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('friendship', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('friendship', 'requested_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('friendship', 'accepted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.drop_constraint(op.f('friendship_friendid_fkey'), 'friendship', type_='foreignkey')
    op.drop_constraint(op.f('friendship_userid_fkey'), 'friendship', type_='foreignkey')
    op.create_foreign_key(None, 'friendship', 'users', ['friend_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'friendship', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('friendship', 'friendid')
    op.drop_column('friendship', 'userid')
    op.add_column('users', sa.Column('profile_pic', sa.String(length=256), nullable=True))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('users', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'custom_url',
               existing_type=sa.VARCHAR(length=16),
               nullable=False)
    op.alter_column('users', 'age',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=32),
               nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               nullable=False)
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('users', 'password_hash',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=32),
               nullable=True)
    op.alter_column('users', 'age',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('users', 'custom_url',
               existing_type=sa.VARCHAR(length=16),
               nullable=True)
    op.alter_column('users', 'deleted_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('users', 'profile_pic')
    op.add_column('friendship', sa.Column('userid', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('friendship', sa.Column('friendid', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'friendship', type_='foreignkey')
    op.drop_constraint(None, 'friendship', type_='foreignkey')
    op.create_foreign_key(op.f('friendship_userid_fkey'), 'friendship', 'users', ['userid'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('friendship_friendid_fkey'), 'friendship', 'users', ['friendid'], ['id'], ondelete='CASCADE')
    op.alter_column('friendship', 'accepted_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('friendship', 'requested_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('friendship', 'deleted_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('friendship', 'updated_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('friendship', 'created_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('friendship', 'friend_id')
    op.drop_column('friendship', 'user_id')
    # ### end Alembic commands ###
